#This test case will test Metering logic and variables passing logic. with below configuration we shall get ~1.0mpps around on Gate 0 in visual graph .
#Input for metering : .cir = 1000000 * 60, .cbs = 2048, .ebs = 2048 ; 
#Input for testing whether module is passing corect value further   : foobar = 3
#expected output : for metering User shall see ~1.0 Mpps outputting at gate 0 in graph, rest goes to Gate no 1 of Metering Module.
#expected output : Split will choose output gate based on value of foobar  : for foobar=3, user shall see (all green packets) ~1.0 Mpps shall goto gate 3 of Split module.

import socket
def aton(val):
    return socket.htonl(val)

Metering::Qos(fields=[{'attr_name':'inport',
              'num_bytes':4},{'attr_name':'outport', 'num_bytes':4}],
              values=[{'attr_name':'foobar', 'num_bytes':4}])

Source() -> SetMetadata(attrs=[{'name': 'inport', 'size': 4, 'value_int': (6)},
                        {'name': 'outport', 'size':4, 'value_int':(5)}]) -> Metering

Metering:0 -> S::Split(size=4, attribute='foobar')
Metering:1 -> Sink()   # used as default gate
S:0 -> Sink() # If traffic is going to this gate, meta update in QoS is not working
S:1 -> Sink()
S:2 -> Sink()
S:3 -> Sink()
S:4 -> Sink()

Metering.add(fields=[{'value_int':aton(6)}, {'value_int':aton(5)}],
             gate=0,cir=1000000 * 60,pir=1000000 * 60,cbs=2048,pbs=2048,ebs=2048,values=[{'value_int':aton(3)}])
Metering.set_default_gate(gate=1)
